@using BlazorOverview.Models
@using BlazorOverview.Services
@inject IMyNoteService MyNoteService

<h3>我的記事</h3>

@* HTML declaration *@

<table class="table">
    <thead>
        <tr>
            <th>事項</th>
            <th>修改</th>
            <th>刪除</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var noteItem in Notes)
        {
            <tr>
                <td>@noteItem.Title</td>
                <td><input type="button" class="btn btn-primary" value="修改" @onclick="() => Update(noteItem)"/></td>
                <td><input type="button" class="btn btn-danger" value="刪除" @onclick="() => Delete(noteItem)" /></td>
            </tr>
        }
    </tbody>
</table>
<div>
    <input type="button" class="btn btn-primary" @onclick="Add" value="新增" />
</div>

@* Conditional code controllable portion **@
@if(ShowPopup)
{
    <div class="modal" tabindex="-1" role="dialog" style="display:block">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">記事項目</h5>
                    <button type="button" class="close" @onclick="CloseDialog"><span aria-hidden="true">x</span></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-9">
                            <div class="row p-2">
                                @* Use Blazor's EditForm component and its OnValidSubmit event to do input data validation. *@
                                <EditForm Model="@CurrentMyNote" OnValidSubmit="@HandleValidSubmit">
                                    <DataAnnotationsValidator/>
                                    <ValidationSummary />
                                    <div class="form-group">
                                        <label for="taskName">事項名稱</label>
                                        <InputText id="taskName" class="form-control" @bind-Value="@CurrentMyNote.Title" />
                                    </div>
                                    @* It will trigger OnValidSubmit event *@
                                    <button type="submit" class="btn btn-primary">儲存</button>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
    </div>
}

@code {

    private List<MyNote> Notes { get; set; }

    private MyNote CurrentMyNote { get; set; } = new MyNote();
    private MyNote OriginMyNote { get; set; } = new MyNote();
    //control wheter to show model window or not
    private bool ShowPopup { get; set; } = false;
    private bool IsNewMode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Notes = await MyNoteService.RetriveAsync();
        await base.OnInitializedAsync();
    }

        private void Add()
    {
        IsNewMode = true;
        CurrentMyNote = new MyNote();

        ShowPopup = true;
    }

    private void Update(MyNote note)
    {
        IsNewMode = false;

        CurrentMyNote = note.Clone();
        OriginMyNote = note;

        ShowPopup = true;
    }

    private void CloseDialog()
    {
        ShowPopup = false;
    }

    private async void HandleValidSubmit()
    {
        ShowPopup = false;

        if(IsNewMode == true)
        {
            await MyNoteService.CreateAsync(CurrentMyNote);
        }
        else
        {
            await MyNoteService.UpdateAsync(OriginMyNote, CurrentMyNote);
        }

        Notes = await MyNoteService.RetriveAsync();
        StateHasChanged();
    }

    private async Task Delete(MyNote note)
    {
        await MyNoteService.DeleteAsync(note);
    }

}
