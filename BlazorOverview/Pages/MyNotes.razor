@using BlazorOverview.Models
@using BlazorOverview.Services
@inject IMyNoteService MyNoteService
@* Inject Js Interop *@
@inject IJSRuntime jsRuntime

<h3>我的記事</h3>

@* HTML declaration *@

<table class="table">
    <thead>
        <tr>
            <th>事項</th>
            <th>修改</th>
            <th>刪除</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var noteItem in Notes)
        {
            <tr>
                <td>@noteItem.Title</td>
                <td><input type="button" class="btn btn-primary" value="修改" @onclick="() => Update(noteItem)" /></td>
                <td><input type="button" class="btn btn-danger" value="刪除" @onclick="() => Delete(noteItem)" /></td>
            </tr>
        }
    </tbody>
</table>
<div>
    <input type="button" class="btn btn-primary" @onclick="Add" value="新增" />
</div>

@* BootStrap model open/close by jQuery invoked by C# *@
<div class="modal" tabindex="-1" role="dialog" id="@DialogIdName">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">記事項目</h5>
                <button type="button" class="close" @onclick="CloseDialog">
                    <span aria-hidden="true">x</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-9">
                        <div class="row p-2">
                            <EditForm Model="@CurrentMyNote" OnValidSubmit="@HandleValidSubmit">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="form-group">
                                    <label for="taskName">Task Name</label>
                                    <InputText id="taskName" class="form-control" @bind-Value="@CurrentMyNote.Title" />
                                </div>
                                <button type="submit" class="btn btn-primary">儲存</button>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private List<MyNote> Notes { get; set; }

    private MyNote CurrentMyNote { get; set; } = new MyNote();
    private MyNote OriginMyNote { get; set; } = new MyNote();
    //control wheter to show model window or not
    private bool IsNewMode { get; set; }

    private string DialogIdName { get; set; } = "myModal";

    protected override async Task OnInitializedAsync()
    {
        Notes = await MyNoteService.RetriveAsync();
        await base.OnInitializedAsync();
    }

    private async void Add()
    {
        IsNewMode = true;
        CurrentMyNote = new MyNote();

        await jsRuntime.InvokeAsync<object>("ShowModal", DialogIdName);
    }

    private async void Update(MyNote note)
    {
        IsNewMode = false;

        CurrentMyNote = note.Clone();
        OriginMyNote = note;

        await jsRuntime.InvokeAsync<object>("ShowModal", DialogIdName);
    }

    private async void CloseDialog()
    {
        await jsRuntime.InvokeAsync<object>("CloseModal", DialogIdName);
    }

    private async void HandleValidSubmit()
    {
        await jsRuntime.InvokeAsync<object>("CloseModal", DialogIdName);

        if (IsNewMode == true)
        {
            await MyNoteService.CreateAsync(CurrentMyNote);
        }
        else
        {
            await MyNoteService.UpdateAsync(OriginMyNote, CurrentMyNote);
        }

        Notes = await MyNoteService.RetriveAsync();
        StateHasChanged();
    }

    private async Task Delete(MyNote note)
    {
        await MyNoteService.DeleteAsync(note);
        Notes = await MyNoteService.RetriveAsync();
        StateHasChanged();
    }

}
